#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Telegram

# SPDX-FileCopyrightText: 2013 Mathias Kettner <mk@mathias-kettner.de>
# SPDX-FileCopyrightText: 2021 Stefan Gehn <stefan+cmk@srcbox.net>
#
# SPDX-License-Identifier: GPL-2.0-only

# Telegram notification based on asciimail notification from check_mk 1.2.6p16.

from __future__ import unicode_literals
from os import environ
import re
import sys
import requests
from cmk.notification_plugins import utils


tmpl_host_text = """*$HOSTSTATE_EMOJI$**Monitor: $MON_HOST$* / Site: *$OMD_SITE$*

*Host* state change detected

`Change         ` *$EVENT_TXT$*
`Host:          ` [$HOSTNAME$]($HSTLINK$)
`Service:       ` [$SERVICEDESC$]($SVCLINK$)

`$HOSTOUTPUT$`

"""

tmpl_service_text = """*$SERVICESTATE_EMOJI$* *Monitor: $MON_HOST$* / Site: *$OMD_SITE$*

*Service* state change detected

`Change         ` *$EVENT_TXT$*
`Host:          ` [$HOSTNAME$]($HSTLINK$)
`Service:       ` [$SERVICEDESC$]($SVCLINK$)

`$SERVICEOUTPUT$`

"""


def hoststate_as_emoji(hoststate):
    if hoststate == "UP":
        return "游릴"  # large blue circle
    elif hoststate == "DOWN":
        return "游린"  # large red circle
    elif hoststate == "UNREACH":
        return "游릲"  # medium white circle
    return hoststate


def servicestate_as_emoji(servicestate):
    if servicestate == "OK":
        return "游릴"  # squared ok
    elif servicestate == "WARN":
        return "游릳"  # warning sign
    elif servicestate == "CRIT":
        return "游린"  # heavy exclamation mark symbol
    elif servicestate == "UNKN":
        return "游릲"  # white question mark ornament
    return servicestate


def construct_message_text(context):
    context["HOSTSTATE_EMOJI"] = hoststate_as_emoji(context.get("HOSTSHORTSTATE", ""))
    context["SERVICESTATE_EMOJI"] = servicestate_as_emoji(
        context.get("SERVICESHORTSTATE", "")
    )

    notification_type = context["NOTIFICATIONTYPE"]
    if notification_type in ["PROBLEM", "RECOVERY"]:
        txt_info = "$PREVIOUS@HARDSHORTSTATE$ -> $@SHORTSTATE$"
    elif notification_type.startswith("FLAP"):
        if "START" in notification_type:
            txt_info = "Started Flapping"
        else:
            txt_info = "Stopped Flapping ($@SHORTSTATE$)"
    elif notification_type.startswith("DOWNTIME"):
        what = notification_type[8:].title()
        txt_info = "Downtime " + what + " ($@SHORTSTATE$)"
    elif notification_type == "ACKNOWLEDGEMENT":
        txt_info = "Acknowledged ($@SHORTSTATE$)"
    elif notification_type == "CUSTOM":
        txt_info = "Custom Notification ($@SHORTSTATE$)"
    else:
        txt_info = notification_type  # Should never happen

    context["EVENT_TXT"] = utils.substitute_context(
        txt_info.replace("@", context["WHAT"]), context
    )
    base_url = "NONE"
    mon_host = "NONE"
    with open("../../../../tmp/base_url","r") as out:
        base_url = out.read().rstrip("\n").rstrip("/")
        mon_host = str(base_url).replace("https://","").replace(f'/{environ.get("OMD_SITE")}',"")
    context["MON_HOST"] = mon_host
    context["HOSTNAME"] = re.sub(r"\..*","",context["HOSTNAME"] )
    if context["WHAT"] == "HOST":
        tmpl_text = tmpl_host_text
        context["HSTLINK"] = f'{base_url}{context.get("HOSTURL")}'
    else:
        tmpl_text = tmpl_service_text
        context["HSTLINK"] = f'{base_url}{context.get("HOSTURL")}'.replace("hoststatus","host")
        context["SVCLINK"] = f'{base_url}{context.get("SERVICEURL")}'
    
    return utils.substitute_context(tmpl_text, context)


def send_telegram_message(token, chat_id, text):
    url = "https://api.telegram.org/bot{}/sendMessage".format(token)
    json = {
        "chat_id": chat_id,
        "disable_web_page_preview": True,
        "parse_mode": "Markdown",
        "text": text,
    }
    r = requests.post(url=url, json=json)

    if r.status_code != 200:
        sys.stderr.write(
            "Failed to send Telegram message. Status: {}, Response: {}\n".format(
                r.status_code, r.text
            )
        )
        return 1  # Temporary error to make Checkmk retry

    sys.stdout.write(
        "Sent message to Telegram chat {}\n".format(chat_id)
    )
    return 0


def main():
    context = utils.collect_context()
    token = context["PARAMETER_BOT_TOKEN"]
    chat_id = context["PARAMETER_CHAT_ID"]
    text = construct_message_text(context)

    return send_telegram_message(token, chat_id, text)


if __name__ == "__main__":
    sys.exit(main())
